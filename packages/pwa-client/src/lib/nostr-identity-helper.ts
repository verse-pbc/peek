// Pure functions for Nostr identity and encryption setup
// Data-oriented: separate data transformation from side effects

import { generateSecretKey, getPublicKey } from 'nostr-tools/pure';
import { hexToBytes, bytesToHex } from './hex';
import { hasNip44Support, nip07Encrypt, nip07Decrypt } from './nostrify-shim';

const ANON_KEY = 'peek_anonymous_identity';

export interface EncryptionHelper {
  encrypt: (pubkey: string, plaintext: string) => Promise<string>;
  decrypt: (pubkey: string, ciphertext: string) => Promise<string>;
}

export interface IdentitySetup {
  secretKey: Uint8Array;
  publicKey: string;
  encryptionHelper?: EncryptionHelper;
  usingAnonymous: boolean;
}

interface StoredIdentity {
  secretKey: string;
  publicKey: string;
  isAutoGenerated?: boolean;
}

/**
 * Get or create anonymous identity from localStorage
 * Pure regarding localStorage access - returns same result for same state
 */
function getOrCreateAnonymousIdentity(): { secretKey: Uint8Array; publicKey: string } {
  const stored = localStorage.getItem(ANON_KEY);

  if (stored) {
    try {
      const parsed: StoredIdentity = JSON.parse(stored);
      return {
        secretKey: hexToBytes(parsed.secretKey),
        publicKey: parsed.publicKey
      };
    } catch {
      // Invalid stored data, regenerate
    }
  }

  // Generate new anonymous identity
  const newSecretKey = generateSecretKey();
  const newPublicKey = getPublicKey(newSecretKey);

  localStorage.setItem(ANON_KEY, JSON.stringify({
    secretKey: bytesToHex(newSecretKey),
    publicKey: newPublicKey,
    createdAt: Date.now(),
    isAutoGenerated: true
  }));

  return {
    secretKey: newSecretKey,
    publicKey: newPublicKey
  };
}

/**
 * Create encryption helper for NIP-07 with nip44 support
 */
function createNip07EncryptionHelper(): EncryptionHelper {
  return {
    encrypt: nip07Encrypt,
    decrypt: nip07Decrypt
  };
}

/**
 * Set up identity and encryption for Nostr operations
 * Handles all cases: NIP-07 with/without nip44, regular identity, anonymous
 */
export function setupNostrIdentity(
  userIdentity: { secretKey: string; publicKey: string } | null,
  userPubkey: string | null
): IdentitySetup {
  // Case 1: User logged in with NIP-07 extension + nip44 support
  if (userIdentity?.secretKey === 'NIP07_EXTENSION' && hasNip44Support() && userPubkey) {
    const anon = getOrCreateAnonymousIdentity();

    return {
      secretKey: anon.secretKey, // For gift wrap
      publicKey: userPubkey, // Real identity for seal
      encryptionHelper: createNip07EncryptionHelper(),
      usingAnonymous: false
    };
  }

  // Case 2: User logged in with NIP-07 extension without nip44
  if (userIdentity?.secretKey === 'NIP07_EXTENSION' && userPubkey) {
    const anon = getOrCreateAnonymousIdentity();

    return {
      secretKey: anon.secretKey,
      publicKey: userPubkey, // Real identity
      encryptionHelper: undefined, // Use local key encryption
      usingAnonymous: true // Anonymous for encryption only
    };
  }

  // Case 3: User logged in with regular identity (has secret key)
  if (userIdentity?.secretKey && userPubkey) {
    return {
      secretKey: hexToBytes(userIdentity.secretKey),
      publicKey: userPubkey,
      encryptionHelper: undefined,
      usingAnonymous: false
    };
  }

  // Case 4: Not logged in - use anonymous identity
  const anon = getOrCreateAnonymousIdentity();

  return {
    secretKey: anon.secretKey,
    publicKey: anon.publicKey,
    encryptionHelper: undefined,
    usingAnonymous: true
  };
}

/**
 * Determine if using NIP-07 extension
 */
export function isUsingNip07Extension(identity: { secretKey: string } | null): boolean {
  return identity?.secretKey === 'NIP07_EXTENSION';
}

/**
 * Determine if NIP-07 has nip44 support
 */
export function hasNip07WithNip44(identity: { secretKey: string } | null): boolean {
  return isUsingNip07Extension(identity) && hasNip44Support();
}
