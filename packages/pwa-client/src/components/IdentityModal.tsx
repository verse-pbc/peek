import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from './ui/dialog';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Alert, AlertDescription } from './ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Checkbox } from './ui/checkbox';
import { AlertCircle, Zap, Copy, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/useToast';

interface IdentityModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onImport: (nsec: string, shouldMigrate?: boolean) => void;
  onExtension?: () => void;
  mode: 'upgrade' | 'switch';
  hasBackedUpNsec?: boolean;
  currentNsec?: string;
  isAutoGenerated?: boolean;
  hasJoinedCommunities?: boolean;
  isUsingExtension?: boolean;
}

export const IdentityModal: React.FC<IdentityModalProps> = ({
  open,
  onOpenChange,
  onImport,
  onExtension,
  mode,
  hasBackedUpNsec = false,
  currentNsec,
  isAutoGenerated = false,
  hasJoinedCommunities = false,
  isUsingExtension = false,
}) => {
  const { toast } = useToast();
  const [nsecInput, setNsecInput] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'import' | 'extension'>('import');
  const [keepCommunities, setKeepCommunities] = useState(true);
  const [showBackupWarning, setShowBackupWarning] = useState(false);
  const [hasConfirmedBackup, setHasConfirmedBackup] = useState(false);

  const isUpgradeMode = mode === 'upgrade';
  const showMigrationChoice = isUpgradeMode && isAutoGenerated && hasJoinedCommunities;
  const hasExtension = typeof window !== 'undefined' && !!window.nostr;
  const showExtensionTab = hasExtension && !isUsingExtension; // Show checkbox for all anonymous users

  const handleCopyCurrentNsec = () => {
    if (!currentNsec) return;
    navigator.clipboard.writeText(currentNsec);
    setHasConfirmedBackup(true);
    toast({ title: "Secret key copied!", description: "Store this safely to return to your communities later." });
  };

  const handleCheckboxChange = (checked: boolean | 'indeterminate') => {
    const isChecked = checked === true;
    setKeepCommunities(isChecked);
    // If unchecking and haven't backed up yet, show warning
    if (!isChecked && !hasConfirmedBackup && !hasBackedUpNsec) {
      setShowBackupWarning(true);
    } else {
      setShowBackupWarning(false);
    }
  };

  const handleImport = React.useCallback(() => {
    console.log('[IdentityModal] handleImport called with nsec:', nsecInput.substring(0, 10) + '...');

    if (!nsecInput.trim()) {
      setError('Please enter your nsec key');
      return;
    }

    if (!nsecInput.startsWith('nsec1')) {
      setError('Invalid nsec format - must start with nsec1');
      return;
    }

    try {
      console.log('[IdentityModal] Calling onImport with shouldMigrate:', keepCommunities);
      onImport(nsecInput, keepCommunities);
      console.log('[IdentityModal] onImport completed successfully');
    } catch (err) {
      console.error('[IdentityModal] onImport failed:', err);
      setError('Invalid nsec key - please check and try again');
    }
  }, [nsecInput, onImport, keepCommunities]);

  const handleExtension = () => {
    if (onExtension) {
      onExtension();
      onOpenChange(false);
    }
  };

  // Offer to import or use extension
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Switch Account</DialogTitle>
          <DialogDescription>
            {mode === 'upgrade' && hasJoinedCommunities
              ? 'Switch to a different identity. You can bring your communities and roles with you, or start with a clean slate.'
              : 'Switch to a different identity.'
            }
          </DialogDescription>
        </DialogHeader>

        {/* Migration choice for auto-generated users with communities */}
        {showMigrationChoice && (
          <div className="space-y-3 p-4 border rounded-lg bg-muted/50">
            <div className="flex items-start space-x-3">
              <Checkbox
                id="keep-communities"
                checked={keepCommunities}
                onCheckedChange={handleCheckboxChange}
                className="mt-0.5"
              />
              <div className="flex-1 space-y-1">
                <label
                  htmlFor="keep-communities"
                  className="text-sm font-medium cursor-pointer leading-tight"
                >
                  Keep my communities and admin roles
                </label>
                <p className="text-xs text-muted-foreground">
                  Your previous messages will belong to your new identity
                </p>
              </div>
            </div>

            {/* Inline backup warning when unchecked */}
            {!keepCommunities && (
              <div className="space-y-3 pt-3 border-t">
                <div className="flex gap-2 text-destructive">
                  <AlertTriangle className="h-4 w-4 flex-shrink-0 mt-0.5" />
                  <div className="text-sm space-y-2">
                    <div className="font-medium">Save your secret key first!</div>
                    <div>
                      You need this to return to your current communities later.
                    </div>
                  </div>
                </div>
                {currentNsec && (
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full"
                    onClick={handleCopyCurrentNsec}
                  >
                    <Copy className="mr-2 h-4 w-4" />
                    {hasConfirmedBackup ? '✓ Secret Key Copied' : 'Copy Secret Key to Continue'}
                  </Button>
                )}
                <p className="text-xs text-muted-foreground">
                  Store it in a password manager or secure notes. Never share it with anyone.
                </p>
              </div>
            )}
          </div>
        )}

        {showExtensionTab ? (
          <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as 'import' | 'extension')}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="import">Import Identity</TabsTrigger>
            <TabsTrigger value="extension">Browser Extension</TabsTrigger>
          </TabsList>
          
          <TabsContent value="import" className="space-y-4">
            <div className="space-y-3">
              <div className="space-y-2">
                <Label htmlFor="nsec">Nostr Key to Import (nsec)</Label>
                <Input
                  id="nsec"
                  type="password"
                  placeholder="nsec1..."
                  value={nsecInput}
                  onChange={(e) => {
                    setNsecInput(e.target.value);
                    setError(null);
                  }}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') handleImport();
                  }}
                />
              </div>

              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">
                  Paste a Nostr key from another app to use that identity here.
                </p>
                <a
                  href="https://nostr.com/"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-xs text-coral hover:underline inline-flex items-center gap-1"
                >
                  New to Nostr? Learn more →
                </a>
              </div>
            </div>
            
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                Cancel
              </Button>
              <Button
                type="button"
                onClick={handleImport}
                disabled={showBackupWarning && !hasConfirmedBackup}
              >
                {hasJoinedCommunities
                  ? (keepCommunities ? 'Upgrade & Keep Communities' : 'Switch & Start Fresh')
                  : 'Switch Account'
                }
              </Button>
            </DialogFooter>
          </TabsContent>

          <TabsContent value="extension" className="space-y-4">
            <div className="space-y-3">
              <p className="text-sm text-muted-foreground">
                Connect your Nostr browser extension (like Alby or nos2x) to use your existing identity without exposing your private key.
              </p>

              <Alert>
                <Zap className="h-4 w-4" />
                <AlertDescription>
                  Your browser extension will handle signing events securely. Your private key never leaves the extension.
                </AlertDescription>
              </Alert>

              {!window.nostr && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    No Nostr browser extension detected. Please install Alby, nos2x, or another NIP-07 compatible extension.
                  </AlertDescription>
                </Alert>
              )}
            </div>

            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                Cancel
              </Button>
              <Button
                type="button"
                onClick={handleExtension}
                disabled={!window.nostr || !onExtension}
              >
                <Zap className="mr-2 h-4 w-4" />
                Connect Extension
              </Button>
            </DialogFooter>
          </TabsContent>
        </Tabs>
        ) : (
          <div className="space-y-4 py-4">
            <div className="space-y-3">
              <div className="space-y-2">
                <Label htmlFor="nsec-no-tabs">Nostr Key to Import (nsec)</Label>
                <Input
                  id="nsec-no-tabs"
                  type="password"
                  placeholder="nsec1..."
                  value={nsecInput}
                  onChange={(e) => {
                    setNsecInput(e.target.value);
                    setError(null);
                  }}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') handleImport();
                  }}
                />
              </div>

              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">
                  Paste a Nostr key from another app to use that identity here.
                </p>
                <a
                  href="https://nostr.com/"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-xs text-coral hover:underline inline-flex items-center gap-1"
                >
                  New to Nostr? Learn more →
                </a>
              </div>
            </div>

            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                Cancel
              </Button>
              <Button
                type="button"
                onClick={handleImport}
                disabled={showBackupWarning && !hasConfirmedBackup}
              >
                {hasJoinedCommunities
                  ? (keepCommunities ? 'Upgrade & Keep Communities' : 'Switch & Start Fresh')
                  : 'Switch Account'
                }
              </Button>
            </DialogFooter>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};